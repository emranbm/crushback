---
name: Master Workflow
on:
  push:
    branches:
      - master
env:
  HELM_MAX_HISTORY: "5"
jobs:
  unit-tests:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'
          cache: 'pipenv'
      - name: Install pipenv
        run: curl https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py | python
      - run: pipenv install --dev
        working-directory: ./backend/
      - name: Start database
        run: docker-compose up -d database
      - name: Wait for DB to get ready
        # TODO: Instead of blind sleep, check DB health.
        run: sleep 2
      - name: Run unit tests
        working-directory: ./backend/
        run: pipenv run python ./manage.py test
  end-to-end-tests:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'
          cache: 'pipenv'
      - name: Install pipenv
        run: curl https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py | python
      - run: pipenv install --dev
        working-directory: ./e2e-tests/telegrambot/
      - name: Make Pipenv also accessible inside tests
        run: sudo cp `which pipenv` /usr/bin/pipenv
      - name: Replace .env
        working-directory: ./e2e-tests/telegrambot/
        run: |
          echo "
          CRUSHBACK_TELEGRAM_BOT_TOKEN=${{ secrets.CRUSHBACK_TEST_TELEGRAM_TEST_BOT_TOKEN }}
          CRUSHBACK_TELEGRAM_BOT_USERNAME=${{ vars.CRUSHBACK_TEST_TELEGRAM_BOT_USERNAME }}
          CRUSHBACK_TELEGRAM_CLIENT1_USERNAME=${{ vars.CRUSHBACK_TELEGRAM_CLIENT1_USERNAME }}
          CRUSHBACK_TELEGRAM_CLIENT1_API_ID=${{ secrets.CRUSHBACK_TELEGRAM_CLIENT1_API_ID }}
          CRUSHBACK_TELEGRAM_CLIENT1_API_HASH=${{ secrets.CRUSHBACK_TELEGRAM_CLIENT1_API_HASH }}
          CRUSHBACK_TELEGRAM_CLIENT1_SESSION_STRING=${{ secrets.CRUSHBACK_TELEGRAM_CLIENT1_SESSION_STRING }}
          CRUSHBACK_TELEGRAM_CLIENT2_USERNAME=${{ vars.CRUSHBACK_TELEGRAM_CLIENT2_USERNAME }}
          CRUSHBACK_TELEGRAM_CLIENT2_API_ID=${{ secrets.CRUSHBACK_TELEGRAM_CLIENT2_API_ID }}
          CRUSHBACK_TELEGRAM_CLIENT2_API_HASH=${{ secrets.CRUSHBACK_TELEGRAM_CLIENT2_API_HASH }}
          CRUSHBACK_TELEGRAM_CLIENT2_SESSION_STRING=${{ secrets.CRUSHBACK_TELEGRAM_CLIENT2_SESSION_STRING }}
          " > .env
      - name: Run end-to-end tests
        working-directory: ./e2e-tests/telegrambot/
        run: python ./main.py
  check-migrations:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'
          cache: 'pipenv'
      - name: Install pipenv
        run: curl https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py | python
      - run: pipenv install
        working-directory: ./backend/
      - name: Start database
        run: docker-compose up -d database
      - name: Wait for DB to get ready
        # TODO: Instead of blind sleep, check DB health.
        run: sleep 2
      - run: pipenv run python ./manage.py makemigrations --dry-run --check
        working-directory: ./backend/
  build-backend-image:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - run: echo "CRUSHBACK_VERSION=master-${GITHUB_SHA}" >> $GITHUB_ENV
      - name: Docker Login
        run: echo ${{ secrets.DOCKER_REGISTRY_TOKEN }} | docker login -u ${{ vars.DOCKER_REGISTRY_USER }} --password-stdin ${{ vars.DOCKER_REGISTRY_HOST }}
      - run: docker-compose build backend
      - run: docker-compose push backend
  build-crushback-metrics-image:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - run: echo "CRUSHBACK_VERSION=master-${GITHUB_SHA}" >> $GITHUB_ENV
      - name: Docker Login
        run: echo ${{ secrets.DOCKER_REGISTRY_TOKEN }} | docker login -u ${{ vars.DOCKER_REGISTRY_USER }} --password-stdin ${{ vars.DOCKER_REGISTRY_HOST }}
      - run: docker-compose build crushback-metrics
      - run: docker-compose push crushback-metrics
  build-frontend:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - run: echo "CRUSHBACK_VERSION=master-${GITHUB_SHA}" >> $GITHUB_ENV
      - name: Docker Login
        run: echo ${{ secrets.DOCKER_REGISTRY_TOKEN }} | docker login -u ${{ vars.DOCKER_REGISTRY_USER }} --password-stdin ${{ vars.DOCKER_REGISTRY_HOST }}
      - run: docker-compose build frontend
      - run: docker-compose push frontend
  deploy-backend:
    runs-on: ubuntu-20.04
    needs:
      - build-backend-image
      - unit-tests
      - end-to-end-tests
      - check-migrations
    steps:
      - uses: actions/checkout@v3
      - name: Setup Kube config
        run: >
          KUBE_API_SERVER="${{ vars.KUBE_API_SERVER }}"
          KUBE_NAMESPACE="${{ vars.KUBE_NAMESPACE }}"
          KUBE_API_TOKEN="${{ secrets.KUBE_API_TOKEN }}"
          ./.github/scripts/setup-kubectl.sh
      - name: Deploy Backend
        run: >
          helm upgrade -i crushback-backend
          --set image.tag="master-${GITHUB_SHA}"
          --set secretKey="${{ secrets.CRUSHBACK_SECRET_KEY }}"
          --set recaptchaServerKey="${{ secrets.RECAPTCHA_SERVER_KEY }}"
          --set database.password="${{ secrets.POSTGRES_ROOT_PASSWORD }}"
          --set backup.dropboxToken="${{ secrets.DROPBOX_TOKEN }}"
          k8s/helm/crushback-backend/
  deploy-telegrambot:
    runs-on: ubuntu-20.04
    needs:
      - build-backend-image
      - unit-tests
      - end-to-end-tests
      - check-migrations
    steps:
      - uses: actions/checkout@v3
      - name: Setup Kube config
        run: >
          KUBE_API_SERVER="${{ vars.KUBE_API_SERVER }}"
          KUBE_NAMESPACE="${{ vars.KUBE_NAMESPACE }}"
          KUBE_API_TOKEN="${{ secrets.KUBE_API_TOKEN }}"
          ./.github/scripts/setup-kubectl.sh
      - name: Deploy Telegram Bot
        run: >
          helm upgrade -i crushback-telegrambot
          --set image.tag="master-${GITHUB_SHA}"
          --set telegramBotToken="${{ secrets.TELEGRAM_BOT_TOKEN }}"
          --set secretKey="${{ secrets.CRUSHBACK_SECRET_KEY }}"
          --set database.password="${{ secrets.POSTGRES_ROOT_PASSWORD }}"
          k8s/helm/crushback-telegrambot/
  deploy-frontend:
    runs-on: ubuntu-20.04
    needs: build-frontend
    steps:
      - uses: actions/checkout@v3
      - name: Setup Kube config
        run: >
          KUBE_API_SERVER="${{ vars.KUBE_API_SERVER }}"
          KUBE_NAMESPACE="${{ vars.KUBE_NAMESPACE }}"
          KUBE_API_TOKEN="${{ secrets.KUBE_API_TOKEN }}"
          ./.github/scripts/setup-kubectl.sh
      - name: Deploy Frontend
        run: >
          helm upgrade -i crushback-frontend
          --set image.tag="master-${GITHUB_SHA}"
          k8s/helm/crushback-frontend/
  deploy-socks-proxy:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Setup Kube config
        run: >
          KUBE_API_SERVER="${{ vars.KUBE_API_SERVER }}"
          KUBE_NAMESPACE="${{ vars.KUBE_NAMESPACE }}"
          KUBE_API_TOKEN="${{ secrets.KUBE_API_TOKEN }}"
          ./.github/scripts/setup-kubectl.sh
      - name: Deploy Socks Proxy
        run: >
          helm upgrade -i socks-proxy
          --set host="${{ vars.SOCKS_HOST }}"
          --set username="${{ vars.SOCKS_USER }}"
          --set password="${{ secrets.SOCKS_PASS }}"
          k8s/helm/socks-proxy/
  deploy-prometheus:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Setup Kube config
        run: >
          KUBE_API_SERVER="${{ vars.KUBE_API_SERVER }}"
          KUBE_NAMESPACE="${{ vars.KUBE_NAMESPACE }}"
          KUBE_API_TOKEN="${{ secrets.KUBE_API_TOKEN }}"
          ./.github/scripts/setup-kubectl.sh
      - name: Deploy Prometheus
        run: helm upgrade -i prometheus k8s/helm/prometheus/
  deploy-cluster-metrics:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Setup Kube config
        run: >
          KUBE_API_SERVER="${{ vars.KUBE_API_SERVER }}"
          KUBE_NAMESPACE="${{ vars.KUBE_NAMESPACE }}"
          KUBE_API_TOKEN="${{ secrets.KUBE_API_TOKEN }}"
          ./.github/scripts/setup-kubectl.sh
      - name: Deploy Prometheus
        run: helm upgrade -i cluster-metrics k8s/helm/cluster-metrics/
  deploy-crushback-metrics:
    runs-on: ubuntu-20.04
    needs: build-crushback-metrics-image
    steps:
      - uses: actions/checkout@v3
      - name: Setup Kube config
        run: >
          KUBE_API_SERVER="${{ vars.KUBE_API_SERVER }}"
          KUBE_NAMESPACE="${{ vars.KUBE_NAMESPACE }}"
          KUBE_API_TOKEN="${{ secrets.KUBE_API_TOKEN }}"
          ./.github/scripts/setup-kubectl.sh
      - name: Deploy Crushback metrics
        run: >
          helm upgrade -i crushback-metrics
          --set image.tag="master-${GITHUB_SHA}"
          --set database.password="${{ secrets.POSTGRES_ROOT_PASSWORD }}"
          k8s/helm/crushback-metrics/

---
name: Master Workflow
on:
  push:
    branches:
      - master
env:
  HELM_MAX_HISTORY: "5"
jobs:
  build-backend:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - run: echo "CRUSHBACK_VERSION=master-${GITHUB_SHA}" >> $GITHUB_ENV
      - name: Docker Login
        run: echo ${{ secrets.DOCKER_REGISTRY_TOKEN }} | docker login -u ${{ vars.DOCKER_REGISTRY_USER }} --password-stdin ${{ vars.DOCKER_REGISTRY_HOST }}
      - run: docker-compose build backend
      - run: docker-compose push backend
  test-backend:
    runs-on: ubuntu-20.04
    needs: build-backend
    steps:
      - uses: actions/checkout@v3
      - run: echo "CRUSHBACK_VERSION=master-${GITHUB_SHA}" >> $GITHUB_ENV
      - name: Docker Login
        run: echo ${{ secrets.DOCKER_REGISTRY_TOKEN }} | docker login -u ${{ vars.DOCKER_REGISTRY_USER }} --password-stdin ${{ vars.DOCKER_REGISTRY_HOST }}
      - run: docker-compose pull backend
      - name: Run unit tests
        run: >
          CRUSHBACK_TEST_TELEGRAM_TEST_BOT_TOKEN={{ secrets.CRUSHBACK_TEST_TELEGRAM_TEST_BOT_TOKEN }}
          CRUSHBACK_TEST_TELEGRAM_API_ID={{ secrets.CRUSHBACK_TEST_TELEGRAM_API_ID }}
          CRUSHBACK_TEST_TELEGRAM_API_HASH={{ secrets.CRUSHBACK_TEST_TELEGRAM_API_HASH }}
          CRUSHBACK_TEST_TELEGRAM_SESSION_STRING={{ secrets.CRUSHBACK_TEST_TELEGRAM_SESSION_STRING }}
          docker-compose run backend bash -c "sleep 2 && ./manage.py test"
        # TODO: Instead of blind sleep, check DB health.
  build-frontend:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - run: echo "CRUSHBACK_VERSION=master-${GITHUB_SHA}" >> $GITHUB_ENV
      - name: Docker Login
        run: echo ${{ secrets.DOCKER_REGISTRY_TOKEN }} | docker login -u ${{ vars.DOCKER_REGISTRY_USER }} --password-stdin ${{ vars.DOCKER_REGISTRY_HOST }}
      - run: docker-compose build frontend
      - run: docker-compose push frontend
  deploy-backend:
    runs-on: ubuntu-20.04
    needs: test-backend
    steps:
      - uses: actions/checkout@v3
      - name: Setup Kube config
        run: >
          KUBE_API_SERVER="${{ vars.KUBE_API_SERVER }}"
          KUBE_NAMESPACE="${{ vars.KUBE_NAMESPACE }}"
          KUBE_API_TOKEN="${{ secrets.KUBE_API_TOKEN }}"
          ./.github/scripts/setup-kubectl.sh
      - name: Deploy Backend
        run: >
          helm upgrade -i crushback-backend
          --set image.tag="master-${GITHUB_SHA}"
          --set secretKey="${{ secrets.CRUSHBACK_SECRET_KEY }}"
          --set recaptchaServerKey="${{ secrets.RECAPTCHA_SERVER_KEY }}"
          --set database.password="${{ secrets.POSTGRES_ROOT_PASSWORD }}"
          k8s/helm/crushback-backend/
  deploy-frontend:
    runs-on: ubuntu-20.04
    needs: build-frontend
    steps:
      - uses: actions/checkout@v3
      - name: Setup Kube config
        run: >
          KUBE_API_SERVER="${{ vars.KUBE_API_SERVER }}"
          KUBE_NAMESPACE="${{ vars.KUBE_NAMESPACE }}"
          KUBE_API_TOKEN="${{ secrets.KUBE_API_TOKEN }}"
          ./.github/scripts/setup-kubectl.sh
      - name: Deploy Frontend
        run: >
          helm upgrade -i crushback-frontend
          --set image.tag="master-${GITHUB_SHA}"
          k8s/helm/crushback-frontend/
  deploy-socks-proxy:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Setup Kube config
        run: >
          KUBE_API_SERVER="${{ vars.KUBE_API_SERVER }}"
          KUBE_NAMESPACE="${{ vars.KUBE_NAMESPACE }}"
          KUBE_API_TOKEN="${{ secrets.KUBE_API_TOKEN }}"
          ./.github/scripts/setup-kubectl.sh
      - name: Deploy Socks Proxy
        run: >
          helm upgrade -i socks-proxy
          --set host="${{ vars.SOCKS_HOST }}"
          --set username="${{ vars.SOCKS_USER }}"
          --set password="${{ secrets.SOCKS_PASS }}"
          k8s/helm/socks-proxy/
  deploy-telegrambot:
    runs-on: ubuntu-20.04
    needs: test-backend
    steps:
      - uses: actions/checkout@v3
      - name: Setup Kube config
        run: >
          KUBE_API_SERVER="${{ vars.KUBE_API_SERVER }}"
          KUBE_NAMESPACE="${{ vars.KUBE_NAMESPACE }}"
          KUBE_API_TOKEN="${{ secrets.KUBE_API_TOKEN }}"
          ./.github/scripts/setup-kubectl.sh
      - name: Deploy Telegram Bot
        run: >
          helm upgrade -i crushback-telegrambot
          --set image.tag="master-${GITHUB_SHA}"
          --set telegramBotToken="${{ secrets.TELEGRAM_BOT_TOKEN }}"
          --set secretKey="${{ secrets.CRUSHBACK_SECRET_KEY }}"
          --set database.password="${{ secrets.POSTGRES_ROOT_PASSWORD }}"
          k8s/helm/crushback-telegrambot/
  deploy-prometheus:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Setup Kube config
        run: >
          KUBE_API_SERVER="${{ vars.KUBE_API_SERVER }}"
          KUBE_NAMESPACE="${{ vars.KUBE_NAMESPACE }}"
          KUBE_API_TOKEN="${{ secrets.KUBE_API_TOKEN }}"
          ./.github/scripts/setup-kubectl.sh
      - name: Deploy Prometheus
        run: helm upgrade -i prometheus k8s/helm/prometheus/
  deploy-cluster-metrics:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Setup Kube config
        run: >
          KUBE_API_SERVER="${{ vars.KUBE_API_SERVER }}"
          KUBE_NAMESPACE="${{ vars.KUBE_NAMESPACE }}"
          KUBE_API_TOKEN="${{ secrets.KUBE_API_TOKEN }}"
          ./.github/scripts/setup-kubectl.sh
      - name: Deploy Prometheus
        run: helm upgrade -i cluster-metrics k8s/helm/cluster-metrics/
